# -*- coding: utf-8 -*-
# Copyright: (c) 2020, Jordan Borean (@jborean93) <jborean93@gmail.com>
# MIT License (see LICENSE or https://opensource.org/licenses/MIT)

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type  # noqa (fixes E402 for the imports below)

import base64
import datetime

import spnego._kerberos as kerb

import spnego._spnego as sp

from spnego._asn1 import (
    pack_asn1,
    pack_asn1_bit_string,
    pack_asn1_general_string,
    pack_asn1_integer,
    pack_asn1_octet_string,
    pack_asn1_sequence,
    TagClass,
    TypeTagNumber,
)

from spnego._compat import (
    UTC,
)

from spnego._context import (
    GSSMech,
)

from spnego._text import (
    text_type,
)


def test_parse_enum_unknown():
    actual = kerb.parse_enum(10, enum_type=kerb.KerberosAPOptions)
    assert actual == 'UNKNOWN (10)'


def test_parse_flags_unknown():
    actual = kerb.parse_flags(10, enum_type=kerb.KerberosAPOptions)
    assert actual['raw'] == 10
    assert actual['flags'] == ['UNKNOWN (10)']


def test_kerberos_ap_options_native_labels():
    actual = kerb.KerberosAPOptions.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosAPOptions.mutual_required] == 'mutual-required'


def test_kerberos_kdc_options_native_labels():
    actual = kerb.KerberosKDCOptions.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosKDCOptions.forwardable] == 'forwardable'


def test_kerberos_encryption_type_native_labels():
    actual = kerb.KerberosEncryptionType.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosEncryptionType.des_cbc_crc] == 'DES_CBC_CRC'


def test_kerberos_error_code_native_labels():
    actual = kerb.KerberosErrorCode.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosErrorCode.none] == 'KDC_ERR_NONE'


def test_kerberos_message_type_native_labels():
    actual = kerb.KerberosMessageType.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosMessageType.as_req] == 'AS-REQ'


def test_kerberos_pa_data_type_native_labels():
    actual = kerb.KerberosPADataType.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosPADataType.tgs_req] == 'PA-TGS-REQ'


def test_kerberos_principal_name_type_native_labels():
    actual = kerb.KerberosPrincipalNameType.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosPrincipalNameType.principal] == 'NT-PRINCIPAL'


def test_kerberos_host_address_type_native_labels():
    actual = kerb.KerberosHostAddressType.native_labels()

    assert isinstance(actual, dict)
    assert actual[kerb.KerberosHostAddressType.ipv4] == 'IPv4'


def test_unpack_unknown_krb():
    sequence = pack_asn1_sequence([
        pack_asn1(TagClass.context_specific, True, 0, pack_asn1_integer(5)),
        pack_asn1(TagClass.context_specific, True, 1, pack_asn1_integer(0)),
    ])
    actual = sp.unpack_token(sequence, unwrap=True)

    assert isinstance(actual, kerb.KerberosV5Msg)
    assert actual.PVNO == 5
    assert isinstance(actual.sequence, dict)

    assert actual.sequence[0].tag_class == TagClass.universal
    assert not actual.sequence[0].constructed
    assert actual.sequence[0].tag_number == TypeTagNumber.integer
    assert actual.sequence[0].b_data == b'\x05'

    assert actual.sequence[1].tag_class == TagClass.universal
    assert not actual.sequence[1].constructed
    assert actual.sequence[1].tag_number == TypeTagNumber.integer
    assert actual.sequence[1].b_data == b'\x00'


def test_unpack_krb_as_req():
    data = b"\x30\x81\xF2\xA1\x03\x02\x01\x05\xA2\x03\x02\x01\x0A\xA3\x5C\x30" \
           b"\x5A\x30\x4C\xA1\x03\x02\x01\x02\xA2\x45\x04\x43\x30\x41\xA0\x03" \
           b"\x02\x01\x12\xA2\x3A\x04\x38\x07\x40\x46\x03\xA8\x69\xC9\x31\x76" \
           b"\xE2\x8E\xDA\xD1\x34\xCE\x7F\xC4\xC8\x73\x58\x0D\xF4\x61\x1C\x85" \
           b"\x5F\x43\xF6\xAA\x9E\x48\xE2\xF0\x8C\xC2\x88\x70\xAA\xBC\xF0\xF7" \
           b"\xF2\xD4\xA2\xC2\xE3\x53\xDE\x81\xF7\x30\x2F\xAF\x7C\x85\x12\x30" \
           b"\x0A\xA1\x04\x02\x02\x00\x95\xA2\x02\x04\x00\xA4\x81\x87\x30\x81" \
           b"\x84\xA0\x07\x03\x05\x00\x40\x00\x00\x00\xA1\x1B\x30\x19\xA0\x03" \
           b"\x02\x01\x01\xA1\x12\x30\x10\x1B\x0E\x76\x61\x67\x72\x61\x6E\x74" \
           b"\x2D\x64\x6F\x6D\x61\x69\x6E\xA2\x0E\x1B\x0C\x44\x4F\x4D\x41\x49" \
           b"\x4E\x2E\x4C\x4F\x43\x41\x4C\xA3\x21\x30\x1F\xA0\x03\x02\x01\x02" \
           b"\xA1\x18\x30\x16\x1B\x06\x6B\x72\x62\x74\x67\x74\x1B\x0C\x44\x4F" \
           b"\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xA5\x11\x18\x0F\x32\x30" \
           b"\x32\x30\x30\x36\x31\x34\x30\x37\x30\x34\x32\x30\x5A\xA7\x06\x02" \
           b"\x04\x2B\xC4\x02\xDA\xA8\x0E\x30\x0C\x02\x01\x12\x02\x01\x11\x02" \
           b"\x01\x10\x02\x01\x17"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, kerb.KrbAsReq)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.as_req
    assert isinstance(actual.padata, list)
    assert len(actual.padata) == 2

    assert actual.padata[0].data_type == kerb.KerberosPADataType.enc_timestamp
    assert actual.padata[0].b_value == b"\x30\x41\xA0\x03\x02\x01\x12\xA2\x3A\x04\x38\x07\x40\x46\x03\xA8" \
                                       b"\x69\xC9\x31\x76\xE2\x8E\xDA\xD1\x34\xCE\x7F\xC4\xC8\x73\x58\x0D" \
                                       b"\xF4\x61\x1C\x85\x5F\x43\xF6\xAA\x9E\x48\xE2\xF0\x8C\xC2\x88\x70" \
                                       b"\xAA\xBC\xF0\xF7\xF2\xD4\xA2\xC2\xE3\x53\xDE\x81\xF7\x30\x2F\xAF" \
                                       b"\x7C\x85\x12"
    pa1_val = actual.padata[0].value
    assert isinstance(pa1_val, kerb.EncryptedData)
    assert pa1_val.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert pa1_val.kvno is None
    assert pa1_val.cipher == b"\x07\x40\x46\x03\xA8\x69\xC9\x31\x76\xE2\x8E\xDA\xD1\x34\xCE\x7F" \
                             b"\xC4\xC8\x73\x58\x0D\xF4\x61\x1C\x85\x5F\x43\xF6\xAA\x9E\x48\xE2" \
                             b"\xF0\x8C\xC2\x88\x70\xAA\xBC\xF0\xF7\xF2\xD4\xA2\xC2\xE3\x53\xDE" \
                             b"\x81\xF7\x30\x2F\xAF\x7C\x85\x12"

    assert actual.padata[1].data_type == 149
    assert actual.padata[1].b_value == b""
    assert actual.padata[1].value == b""

    assert isinstance(actual.req_body, kerb.KdcReqBody)
    assert actual.req_body.additional_tickets is None
    assert actual.req_body.addresses is None
    assert actual.req_body.cname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.principal, [b'vagrant-domain'])
    assert actual.req_body.enc_authorization_data is None
    assert actual.req_body.etype == [kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96,
                                     kerb.KerberosEncryptionType.aes128_cts_hmac_sha1_96,
                                     kerb.KerberosEncryptionType.des3_cbc_sha1,
                                     kerb.KerberosEncryptionType.rc4_hmac]
    assert actual.req_body.kdc_options == 1073741824
    assert actual.req_body.nonce == 734266074
    assert actual.req_body.postdated_from is None
    assert actual.req_body.postdated_till == datetime.datetime(2020, 6, 14, 7, 4, 20, tzinfo=UTC())
    assert actual.req_body.realm == b'DOMAIN.LOCAL'
    assert actual.req_body.rtime is None
    assert actual.req_body.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_inst,
                                                       [b'krbtgt', b'DOMAIN.LOCAL'])

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert isinstance(actual, dict)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'AS-REQ (10)'
    assert isinstance(actual['padata'], list)
    assert len(actual['padata']) == 2
    assert actual['padata'][0]['padata-type'] == 'PA-ENC-TIMESTAMP (2)'
    assert actual['padata'][0]['padata-value']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['padata'][0]['padata-value']['kvno'] is None
    assert actual['padata'][0]['padata-value']['cipher'] == '07404603A869C93176E28EDAD134CE7F' \
                                                            'C4C873580DF4611C855F43F6AA9E48E2' \
                                                            'F08CC28870AABCF0F7F2D4A2C2E353DE' \
                                                            '81F7302FAF7C8512'
    assert actual['padata'][1]['padata-type'] == 'PA-REQ-ENC-PA-REP (149)'
    assert actual['padata'][1]['padata-value'] == ''
    assert actual['req-body']['kdc-options']['raw'] == 1073741824
    assert actual['req-body']['kdc-options']['flags'] == ['forwardable (1073741824)']
    assert actual['req-body']['cname']['name-type'] == 'NT-PRINCIPAL (1)'
    assert actual['req-body']['cname']['name-string'] == ['vagrant-domain']
    assert actual['req-body']['realm'] == 'DOMAIN.LOCAL'
    assert actual['req-body']['sname']['name-type'] == 'NT-SRV-INST (2)'
    assert actual['req-body']['sname']['name-string'] == ['krbtgt', 'DOMAIN.LOCAL']
    assert actual['req-body']['from'] is None
    assert actual['req-body']['till'] == '2020-06-14T07:04:20+00:00'
    assert actual['req-body']['rtime'] is None
    assert actual['req-body']['nonce'] == 734266074
    assert actual['req-body']['etype'] == ['AES256_CTS_HMAC_SHA1_96 (18)', 'AES128_CTS_HMAC_SHA1_96 (17)',
                                           'DES3_CBC_SHA1 (16)', 'RC4_HMAC (23)']
    assert actual['req-body']['addresses'] is None
    assert actual['req-body']['enc-authorization-data'] is None
    assert actual['req-body']['additional-tickets'] is None


def test_unpack_krb_tgs_req():
    data = b"\x30\x82\x05\xA9\xA1\x03\x02\x01\x05\xA2\x03\x02\x01\x0C\xA3\x82" \
           b"\x05\x27\x30\x82\x05\x23\x30\x82\x05\x1F\xA1\x03\x02\x01\x01\xA2" \
           b"\x82\x05\x16\x04\x82\x05\x12\x6E\x82\x05\x0E\x30\x82\x05\x0A\xA0" \
           b"\x03\x02\x01\x05\xA1\x03\x02\x01\x0E\xA2\x07\x03\x05\x00\x00\x00" \
           b"\x00\x00\xA3\x82\x04\x2E\x61\x82\x04\x2A\x30\x82\x04\x26\xA0\x03" \
           b"\x02\x01\x05\xA1\x0E\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F" \
           b"\x43\x41\x4C\xA2\x21\x30\x1F\xA0\x03\x02\x01\x02\xA1\x18\x30\x16" \
           b"\x1B\x06\x6B\x72\x62\x74\x67\x74\x1B\x0C\x44\x4F\x4D\x41\x49\x4E" \
           b"\x2E\x4C\x4F\x43\x41\x4C\xA3\x82\x03\xEA\x30\x82\x03\xE6\xA0\x03" \
           b"\x02\x01\x12\xA1\x03\x02\x01\x02\xA2\x82\x03\xD8\x04\x82\x03\xD4" \
           b"\xBF\x24\x1F\x8A\x1B\xC0\x00\x3A\x78\xA8\xE8\xFA\x8D\xE0\x4B\x6F" \
           b"\x0A\x86\x2F\x83\x6B\x1B\x21\xBA\xC9\x5E\xD7\xBF\xB5\xF9\xF6\x12" \
           b"\xFB\xBB\xE6\x00\x10\xEA\x97\xBF\x5A\xC6\x09\xBD\xC1\xAD\x61\x5D" \
           b"\xB7\x87\x4F\x0C\xD4\xD6\xEE\xAB\x8A\xB0\x9C\x7D\x54\xDA\xD9\x05" \
           b"\xA1\x28\x9B\x71\x85\x30\x5A\x3F\xB6\xD2\x6A\x14\x83\xB3\xB6\x62" \
           b"\x39\x77\x8C\xF4\x55\xC0\x87\xE7\x09\x18\xC0\xA7\xFE\x9D\x7D\x9E" \
           b"\xB1\xE6\xEA\x09\xB7\xB8\xF5\xA0\x8D\x09\x24\x46\x7A\x2B\x93\xF0" \
           b"\xE7\x91\x33\x23\xA5\x73\x56\x9D\xB3\x84\x2A\xDF\xCB\x3D\x60\xC8" \
           b"\x85\x4B\x91\xB4\xC3\x58\xBB\x44\xDA\xE9\xD0\xC7\xD7\x73\x8B\xEC" \
           b"\xAA\x29\xED\x04\x56\x07\xDB\x94\x4B\x81\x3B\x94\xA2\x71\x69\xF8" \
           b"\xA9\x4E\x20\xAC\x9B\xC3\x57\xFD\xB4\xC4\x9A\x8D\xAF\xC7\x13\xA9" \
           b"\x06\x57\x07\x4C\x3A\x7C\x4F\xD2\x0D\x6A\x39\x07\xA9\x9A\x61\xAE" \
           b"\x90\xBD\xFC\xCE\x94\xF1\x43\x2A\xD3\xDA\x29\x49\x8F\x80\x80\xBD" \
           b"\x06\x95\x3F\xC2\x13\x54\x7A\x15\xB8\xAD\x04\xFB\x7E\x09\xA2\xE7" \
           b"\x99\xF6\xCE\x29\xE8\xC9\x19\x87\xF2\xA6\xC9\x75\x2E\x5D\x1A\xDE" \
           b"\xD6\x04\x1B\xA1\xC9\x50\x6B\x2D\x6A\xBF\xA2\x9A\xDA\xA2\xE1\x2D" \
           b"\xFB\x33\xAF\x20\xAB\x2D\xAA\x58\xD1\x6B\xC3\x7F\x15\x0E\xBE\x49" \
           b"\x1B\x8D\x3E\xA4\xE2\xEE\xBD\xA8\xA3\x2D\x61\x91\x36\x87\x97\x12" \
           b"\x97\xD1\xF8\x41\x75\x12\x68\xAD\xAB\xD0\x11\x70\xF9\xD8\x94\xBB" \
           b"\x22\x98\x38\x26\xB3\xFB\xC6\xF2\x9F\x95\x52\x80\xB3\x95\xAE\x66" \
           b"\xCD\xC9\x88\x26\x9D\xA2\x7B\xDC\x66\x10\x4F\x4F\x8E\x48\xA5\x70" \
           b"\xDC\xE7\xAA\x0A\x43\xBB\x5A\x9F\xEF\x5C\xCE\x1A\xDB\x8E\x9F\x73" \
           b"\x41\x61\x00\xF7\xB4\x8D\x6E\xA4\x02\x85\x40\xED\xE5\x2D\x05\x6C" \
           b"\xBE\xEB\x63\x2E\x7E\xC3\x5E\xB4\xAC\xCD\x5A\x78\x46\x88\x57\xCA" \
           b"\xF3\x8F\xC5\x49\x61\xA7\xBD\x26\x89\xC3\xE4\x20\xF1\xD7\x8F\x5B" \
           b"\x51\xE0\xEC\x2F\x95\xB9\x1D\xB1\x8E\x71\x6F\x7A\xE3\x32\x47\x59" \
           b"\x20\xDC\x2C\x1C\x74\x53\xE1\x85\x62\x6C\x3E\x0A\x2B\xC2\x02\x90" \
           b"\xE7\x5F\x40\xF6\x03\xD3\x5E\xD8\x1B\x13\x22\x43\xB5\x02\x44\xB1" \
           b"\xA6\x2F\x27\x91\xB7\x70\x87\xF6\x33\xE5\xE5\xF9\x8E\x3A\x2B\xD1" \
           b"\x88\x2E\x28\x21\x6A\x53\x02\xEA\x4E\x56\xB6\xE6\xB8\xE2\xA8\x63" \
           b"\x63\xB2\x99\xBA\x07\x5D\xD9\xE9\xF0\x86\xDA\x9B\xDE\x9C\x36\xB7" \
           b"\x45\x03\xB9\xAE\x91\x98\xA9\x83\x09\x41\x2B\xE8\x31\xD5\x39\x0E" \
           b"\xFD\xBB\x8D\xB7\x82\x3A\x5C\x9C\xAD\x9A\x4C\x1F\xA6\x55\x53\x4A" \
           b"\x93\x4C\x07\xE4\x72\x51\x80\x3C\xB9\x0A\x06\xA0\xFD\x68\x24\xD9" \
           b"\x3F\x37\x02\xBD\x54\x5D\x99\xD6\x32\x84\x7D\x65\x0D\x2E\xC5\x55" \
           b"\xF6\x9D\x1B\x61\x05\xCA\xC2\x7F\x75\x82\x09\x18\x0C\x3C\x93\xD7" \
           b"\x26\xC3\x5D\x69\xF6\xD5\x73\x65\xD6\xA2\xEE\x62\x84\x3F\x17\xF2" \
           b"\xF3\x09\x16\xD9\xFD\x72\x7D\x18\x6D\x04\x16\xDB\x4C\x0D\x4D\xC0" \
           b"\x0B\x6B\x8B\x52\x00\xF5\x8C\xB4\x47\xC3\xD3\x20\x10\x9D\x7C\x2F" \
           b"\xF6\x82\x0A\xE2\xCC\xA2\x7C\x1D\x19\x2B\x8C\x94\x3F\x1A\xB6\xF9" \
           b"\x77\xC5\x4C\x88\x6D\xA9\xBD\x92\x54\x0E\x38\xDF\x42\xC9\x13\x74" \
           b"\xA1\xEF\x79\xFA\xAC\x53\x6B\xCA\xB4\x4D\xAE\x0B\x31\xD5\xB9\xEC" \
           b"\x5A\x29\x3F\x70\xA7\x18\x42\x2A\x80\x56\xAE\x15\x90\x95\x5E\x38" \
           b"\xE6\x57\x44\x19\x79\x8B\x8D\x47\x72\xD9\x25\xE2\x65\xA4\xE9\xEE" \
           b"\x16\x93\x5C\x76\x5F\x15\xDD\xF7\x32\x6A\x66\x38\x4D\xBD\xCB\xF7" \
           b"\x58\xAE\x55\x96\xB2\xCC\x64\xFB\xE1\x16\x44\xE7\x73\xC7\x45\xB7" \
           b"\x7F\x26\xA0\xFF\xF1\x61\x48\x19\x2F\xA9\xF8\xE6\x62\x19\x2E\x1F" \
           b"\xC7\x62\x57\x93\x68\xEB\xEC\x56\x70\x02\x49\x8B\xEB\x2F\x70\x04" \
           b"\xD0\xE8\x2D\x38\xDA\xFB\x49\x1B\xF3\xA6\x10\x7F\xE2\x24\xCF\xEC" \
           b"\x1C\x86\xCA\x45\x6F\x29\xB4\x3B\xF5\x2C\xEC\x23\xF1\x32\x64\x7F" \
           b"\xFC\xEF\xA2\x80\x51\xE4\x36\x8D\x5F\xCA\x66\x45\x64\xE1\x99\xAF" \
           b"\x3E\xFB\x20\x20\x77\xD1\x9C\x66\x30\x0B\x8B\x43\x08\x81\x9A\xEE" \
           b"\x54\xCC\x3D\x07\x13\x13\x6E\xE6\x09\x33\x97\x52\x33\x79\x21\x47" \
           b"\x05\x98\xF9\xC5\xF7\x72\xAA\x6F\x7A\x15\xFC\xC0\x78\x6F\x17\x38" \
           b"\x1D\xCC\x9A\xCC\x84\xB2\x3D\xD7\x6D\x68\x89\xD6\x99\xE7\x25\x52" \
           b"\xE9\x14\xF3\xC9\xCB\xF4\x11\x4A\x8D\xA4\x58\xDC\xDD\xC6\xFF\xC9" \
           b"\x7A\xA7\xBF\x6E\xDB\xC0\x69\xDE\x83\x68\xB7\x87\xC3\x97\xBB\xDF" \
           b"\x0B\x79\xFD\xCC\x58\x61\x33\x92\x31\x34\x80\x0F\x08\x66\x7F\xD8" \
           b"\xB3\x21\x1F\x57\xE4\x44\xCF\xCB\xCF\xE7\xA4\x04\x8D\x52\x32\x3C" \
           b"\x17\x1F\xCF\x8F\xA1\xA3\x36\x81\xDE\xD4\x9E\x62\x70\x1F\xF6\x1C" \
           b"\x17\xD4\xEB\x22\x3B\x2E\x97\x1A\xE0\x22\x4C\x46\xA7\x8F\xE8\x7E" \
           b"\xD3\x8B\x8A\x24\xA4\x81\xC2\x30\x81\xBF\xA0\x03\x02\x01\x12\xA2" \
           b"\x81\xB7\x04\x81\xB4\x35\xEB\xCF\x05\xF8\xA7\x2B\xF4\x35\x4B\xC9" \
           b"\x06\x37\x96\xE4\x4B\x02\x6C\x51\x33\x0D\xAB\x41\x05\xB7\x1D\x25" \
           b"\x20\xA0\xDB\xEE\x94\x72\x55\x23\xD5\xCC\x57\xE9\x18\x78\x58\xCB" \
           b"\x79\x64\xC1\xF7\x7A\x47\x41\x6C\xC2\x8B\x14\xDE\x82\x4A\xA9\x1B" \
           b"\x7F\xE2\x75\xE6\xB1\x83\x10\x8B\x16\x98\x5F\x04\x7E\x1F\x60\xAD" \
           b"\x4E\x2B\xC6\x7B\xC1\x5A\xA4\x6C\xA2\x45\x7A\xA6\x07\xA6\xA2\x30" \
           b"\xB4\x8A\x56\x08\x10\x92\x40\xF3\x8E\xDD\x98\xD2\x3A\x0F\x38\xF0" \
           b"\x80\xB9\x57\xD4\x86\x32\x36\x87\xBD\xB8\x3E\x73\xCA\x31\x7F\x86" \
           b"\x87\x8F\xEB\xF2\x4E\x52\x2A\x4A\xAB\xB9\x71\x74\xD4\x6C\xD9\x05" \
           b"\x89\xA3\xD0\x0B\xB1\x31\x01\x27\xB2\xB2\xC8\xC0\x14\x27\x44\xC0" \
           b"\xE4\x55\xDF\x38\xA1\x9D\x74\xD7\x3E\x99\xF8\xB9\x0A\x99\xE4\x18" \
           b"\xEE\x38\xA5\x6B\xC5\xC5\x35\x58\x2F\xA4\x72\x30\x70\xA0\x07\x03" \
           b"\x05\x00\x40\x01\x00\x00\xA2\x0E\x1B\x0C\x44\x4F\x4D\x41\x49\x4E" \
           b"\x2E\x4C\x4F\x43\x41\x4C\xA3\x2A\x30\x28\xA0\x03\x02\x01\x03\xA1" \
           b"\x21\x30\x1F\x1B\x04\x48\x54\x54\x50\x1B\x17\x73\x65\x72\x76\x65" \
           b"\x72\x32\x30\x31\x39\x2E\x64\x6F\x6D\x61\x69\x6E\x2E\x6C\x6F\x63" \
           b"\x61\x6C\xA5\x11\x18\x0F\x31\x39\x37\x30\x30\x31\x30\x31\x30\x30" \
           b"\x30\x30\x30\x30\x5A\xA7\x06\x02\x04\x13\xE0\xFD\x85\xA8\x0E\x30" \
           b"\x0C\x02\x01\x12\x02\x01\x11\x02\x01\x10\x02\x01\x17"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, kerb.KrbTgsReq)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.tgs_req
    assert isinstance(actual.padata, list)
    assert len(actual.padata) == 1
    assert actual.padata[0].data_type == kerb.KerberosPADataType.tgs_req
    assert isinstance(actual.padata[0].b_value, bytes)

    pa1_val = actual.padata[0].value
    assert pa1_val.PVNO == 5
    assert pa1_val.MESSAGE_TYPE == kerb.KerberosMessageType.ap_req
    assert pa1_val.ap_options == 0
    assert isinstance(pa1_val.authenticator.cipher, bytes)
    assert pa1_val.authenticator.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert pa1_val.authenticator.kvno is None
    assert isinstance(pa1_val.ticket.enc_part.cipher, bytes)
    assert pa1_val.ticket.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert pa1_val.ticket.enc_part.kvno == 2
    assert pa1_val.ticket.realm == b'DOMAIN.LOCAL'
    assert pa1_val.ticket.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_inst,
                                                      [b'krbtgt', b'DOMAIN.LOCAL'])
    assert pa1_val.ticket.tkt_vno == 5

    assert actual.req_body.additional_tickets is None
    assert actual.req_body.addresses is None
    assert actual.req_body.cname is None
    assert actual.req_body.enc_authorization_data is None
    assert actual.req_body.etype == [kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96,
                                     kerb.KerberosEncryptionType.aes128_cts_hmac_sha1_96,
                                     kerb.KerberosEncryptionType.des3_cbc_sha1,
                                     kerb.KerberosEncryptionType.rc4_hmac]
    assert actual.req_body.kdc_options == 1073807360
    assert actual.req_body.nonce == 333512069
    assert actual.req_body.postdated_from is None
    assert actual.req_body.postdated_till == datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=UTC())
    assert actual.req_body.realm == b'DOMAIN.LOCAL'
    assert actual.req_body.rtime is None
    assert actual.req_body.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_hst,
                                                       [b'HTTP', b'server2019.domain.local'])

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'TGS-REQ (12)'
    assert isinstance(actual['padata'], list)
    assert len(actual['padata']) == 1
    assert actual['padata'][0]['padata-type'] == 'PA-TGS-REQ (1)'
    assert actual['padata'][0]['padata-value']['pvno'] == 5
    assert actual['padata'][0]['padata-value']['msg-type'] == 'AP-REQ (14)'
    assert actual['padata'][0]['padata-value']['ap-options']['raw'] == 0
    assert actual['padata'][0]['padata-value']['ap-options']['flags'] == []
    assert actual['padata'][0]['padata-value']['ticket']['tkt-vno'] == 5
    assert actual['padata'][0]['padata-value']['ticket']['realm'] == 'DOMAIN.LOCAL'
    assert actual['padata'][0]['padata-value']['ticket']['sname']['name-type'] == 'NT-SRV-INST (2)'
    assert actual['padata'][0]['padata-value']['ticket']['sname']['name-string'] == ['krbtgt', 'DOMAIN.LOCAL']
    assert actual['padata'][0]['padata-value']['ticket']['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['padata'][0]['padata-value']['ticket']['enc-part']['kvno'] == 2
    assert isinstance(actual['padata'][0]['padata-value']['ticket']['enc-part']['cipher'], text_type)
    assert actual['padata'][0]['padata-value']['authenticator']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['padata'][0]['padata-value']['authenticator']['kvno'] is None
    assert isinstance(actual['padata'][0]['padata-value']['authenticator']['cipher'], text_type)
    assert actual['req-body']['kdc-options']['raw'] == 1073807360
    assert actual['req-body']['kdc-options']['flags'] == ['forwardable (1073741824)', 'canonicalize (65536)']
    assert actual['req-body']['cname'] is None
    assert actual['req-body']['realm'] == 'DOMAIN.LOCAL'
    assert actual['req-body']['sname']['name-type'] == 'NT-SRV-HST (3)'
    assert actual['req-body']['sname']['name-string'] == ['HTTP', 'server2019.domain.local']
    assert actual['req-body']['from'] is None
    assert actual['req-body']['till'] == '1970-01-01T00:00:00+00:00'
    assert actual['req-body']['rtime'] is None
    assert actual['req-body']['etype'] == ['AES256_CTS_HMAC_SHA1_96 (18)', 'AES128_CTS_HMAC_SHA1_96 (17)',
                                           'DES3_CBC_SHA1 (16)', 'RC4_HMAC (23)']
    assert actual['req-body']['addresses'] is None
    assert actual['req-body']['enc-authorization-data'] is None
    assert actual['req-body']['additional-tickets'] is None


def test_unpack_krb_as_rep():
    data = b"\x30\x82\x05\xDF\xA0\x03\x02\x01\x05\xA1\x03\x02\x01\x0B\xA2\x34" \
           b"\x30\x32\x30\x30\xA1\x03\x02\x01\x13\xA2\x29\x04\x27\x30\x25\x30" \
           b"\x23\xA0\x03\x02\x01\x12\xA1\x1C\x1B\x1A\x44\x4F\x4D\x41\x49\x4E" \
           b"\x2E\x4C\x4F\x43\x41\x4C\x76\x61\x67\x72\x61\x6E\x74\x2D\x64\x6F" \
           b"\x6D\x61\x69\x6E\xA3\x0E\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C" \
           b"\x4F\x43\x41\x4C\xA4\x1B\x30\x19\xA0\x03\x02\x01\x01\xA1\x12\x30" \
           b"\x10\x1B\x0E\x76\x61\x67\x72\x61\x6E\x74\x2D\x64\x6F\x6D\x61\x69" \
           b"\x6E\xA5\x82\x04\x2E\x61\x82\x04\x2A\x30\x82\x04\x26\xA0\x03\x02" \
           b"\x01\x05\xA1\x0E\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43" \
           b"\x41\x4C\xA2\x21\x30\x1F\xA0\x03\x02\x01\x02\xA1\x18\x30\x16\x1B" \
           b"\x06\x6B\x72\x62\x74\x67\x74\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E" \
           b"\x4C\x4F\x43\x41\x4C\xA3\x82\x03\xEA\x30\x82\x03\xE6\xA0\x03\x02" \
           b"\x01\x12\xA1\x03\x02\x01\x02\xA2\x82\x03\xD8\x04\x82\x03\xD4\xBF" \
           b"\x24\x1F\x8A\x1B\xC0\x00\x3A\x78\xA8\xE8\xFA\x8D\xE0\x4B\x6F\x0A" \
           b"\x86\x2F\x83\x6B\x1B\x21\xBA\xC9\x5E\xD7\xBF\xB5\xF9\xF6\x12\xFB" \
           b"\xBB\xE6\x00\x10\xEA\x97\xBF\x5A\xC6\x09\xBD\xC1\xAD\x61\x5D\xB7" \
           b"\x87\x4F\x0C\xD4\xD6\xEE\xAB\x8A\xB0\x9C\x7D\x54\xDA\xD9\x05\xA1" \
           b"\x28\x9B\x71\x85\x30\x5A\x3F\xB6\xD2\x6A\x14\x83\xB3\xB6\x62\x39" \
           b"\x77\x8C\xF4\x55\xC0\x87\xE7\x09\x18\xC0\xA7\xFE\x9D\x7D\x9E\xB1" \
           b"\xE6\xEA\x09\xB7\xB8\xF5\xA0\x8D\x09\x24\x46\x7A\x2B\x93\xF0\xE7" \
           b"\x91\x33\x23\xA5\x73\x56\x9D\xB3\x84\x2A\xDF\xCB\x3D\x60\xC8\x85" \
           b"\x4B\x91\xB4\xC3\x58\xBB\x44\xDA\xE9\xD0\xC7\xD7\x73\x8B\xEC\xAA" \
           b"\x29\xED\x04\x56\x07\xDB\x94\x4B\x81\x3B\x94\xA2\x71\x69\xF8\xA9" \
           b"\x4E\x20\xAC\x9B\xC3\x57\xFD\xB4\xC4\x9A\x8D\xAF\xC7\x13\xA9\x06" \
           b"\x57\x07\x4C\x3A\x7C\x4F\xD2\x0D\x6A\x39\x07\xA9\x9A\x61\xAE\x90" \
           b"\xBD\xFC\xCE\x94\xF1\x43\x2A\xD3\xDA\x29\x49\x8F\x80\x80\xBD\x06" \
           b"\x95\x3F\xC2\x13\x54\x7A\x15\xB8\xAD\x04\xFB\x7E\x09\xA2\xE7\x99" \
           b"\xF6\xCE\x29\xE8\xC9\x19\x87\xF2\xA6\xC9\x75\x2E\x5D\x1A\xDE\xD6" \
           b"\x04\x1B\xA1\xC9\x50\x6B\x2D\x6A\xBF\xA2\x9A\xDA\xA2\xE1\x2D\xFB" \
           b"\x33\xAF\x20\xAB\x2D\xAA\x58\xD1\x6B\xC3\x7F\x15\x0E\xBE\x49\x1B" \
           b"\x8D\x3E\xA4\xE2\xEE\xBD\xA8\xA3\x2D\x61\x91\x36\x87\x97\x12\x97" \
           b"\xD1\xF8\x41\x75\x12\x68\xAD\xAB\xD0\x11\x70\xF9\xD8\x94\xBB\x22" \
           b"\x98\x38\x26\xB3\xFB\xC6\xF2\x9F\x95\x52\x80\xB3\x95\xAE\x66\xCD" \
           b"\xC9\x88\x26\x9D\xA2\x7B\xDC\x66\x10\x4F\x4F\x8E\x48\xA5\x70\xDC" \
           b"\xE7\xAA\x0A\x43\xBB\x5A\x9F\xEF\x5C\xCE\x1A\xDB\x8E\x9F\x73\x41" \
           b"\x61\x00\xF7\xB4\x8D\x6E\xA4\x02\x85\x40\xED\xE5\x2D\x05\x6C\xBE" \
           b"\xEB\x63\x2E\x7E\xC3\x5E\xB4\xAC\xCD\x5A\x78\x46\x88\x57\xCA\xF3" \
           b"\x8F\xC5\x49\x61\xA7\xBD\x26\x89\xC3\xE4\x20\xF1\xD7\x8F\x5B\x51" \
           b"\xE0\xEC\x2F\x95\xB9\x1D\xB1\x8E\x71\x6F\x7A\xE3\x32\x47\x59\x20" \
           b"\xDC\x2C\x1C\x74\x53\xE1\x85\x62\x6C\x3E\x0A\x2B\xC2\x02\x90\xE7" \
           b"\x5F\x40\xF6\x03\xD3\x5E\xD8\x1B\x13\x22\x43\xB5\x02\x44\xB1\xA6" \
           b"\x2F\x27\x91\xB7\x70\x87\xF6\x33\xE5\xE5\xF9\x8E\x3A\x2B\xD1\x88" \
           b"\x2E\x28\x21\x6A\x53\x02\xEA\x4E\x56\xB6\xE6\xB8\xE2\xA8\x63\x63" \
           b"\xB2\x99\xBA\x07\x5D\xD9\xE9\xF0\x86\xDA\x9B\xDE\x9C\x36\xB7\x45" \
           b"\x03\xB9\xAE\x91\x98\xA9\x83\x09\x41\x2B\xE8\x31\xD5\x39\x0E\xFD" \
           b"\xBB\x8D\xB7\x82\x3A\x5C\x9C\xAD\x9A\x4C\x1F\xA6\x55\x53\x4A\x93" \
           b"\x4C\x07\xE4\x72\x51\x80\x3C\xB9\x0A\x06\xA0\xFD\x68\x24\xD9\x3F" \
           b"\x37\x02\xBD\x54\x5D\x99\xD6\x32\x84\x7D\x65\x0D\x2E\xC5\x55\xF6" \
           b"\x9D\x1B\x61\x05\xCA\xC2\x7F\x75\x82\x09\x18\x0C\x3C\x93\xD7\x26" \
           b"\xC3\x5D\x69\xF6\xD5\x73\x65\xD6\xA2\xEE\x62\x84\x3F\x17\xF2\xF3" \
           b"\x09\x16\xD9\xFD\x72\x7D\x18\x6D\x04\x16\xDB\x4C\x0D\x4D\xC0\x0B" \
           b"\x6B\x8B\x52\x00\xF5\x8C\xB4\x47\xC3\xD3\x20\x10\x9D\x7C\x2F\xF6" \
           b"\x82\x0A\xE2\xCC\xA2\x7C\x1D\x19\x2B\x8C\x94\x3F\x1A\xB6\xF9\x77" \
           b"\xC5\x4C\x88\x6D\xA9\xBD\x92\x54\x0E\x38\xDF\x42\xC9\x13\x74\xA1" \
           b"\xEF\x79\xFA\xAC\x53\x6B\xCA\xB4\x4D\xAE\x0B\x31\xD5\xB9\xEC\x5A" \
           b"\x29\x3F\x70\xA7\x18\x42\x2A\x80\x56\xAE\x15\x90\x95\x5E\x38\xE6" \
           b"\x57\x44\x19\x79\x8B\x8D\x47\x72\xD9\x25\xE2\x65\xA4\xE9\xEE\x16" \
           b"\x93\x5C\x76\x5F\x15\xDD\xF7\x32\x6A\x66\x38\x4D\xBD\xCB\xF7\x58" \
           b"\xAE\x55\x96\xB2\xCC\x64\xFB\xE1\x16\x44\xE7\x73\xC7\x45\xB7\x7F" \
           b"\x26\xA0\xFF\xF1\x61\x48\x19\x2F\xA9\xF8\xE6\x62\x19\x2E\x1F\xC7" \
           b"\x62\x57\x93\x68\xEB\xEC\x56\x70\x02\x49\x8B\xEB\x2F\x70\x04\xD0" \
           b"\xE8\x2D\x38\xDA\xFB\x49\x1B\xF3\xA6\x10\x7F\xE2\x24\xCF\xEC\x1C" \
           b"\x86\xCA\x45\x6F\x29\xB4\x3B\xF5\x2C\xEC\x23\xF1\x32\x64\x7F\xFC" \
           b"\xEF\xA2\x80\x51\xE4\x36\x8D\x5F\xCA\x66\x45\x64\xE1\x99\xAF\x3E" \
           b"\xFB\x20\x20\x77\xD1\x9C\x66\x30\x0B\x8B\x43\x08\x81\x9A\xEE\x54" \
           b"\xCC\x3D\x07\x13\x13\x6E\xE6\x09\x33\x97\x52\x33\x79\x21\x47\x05" \
           b"\x98\xF9\xC5\xF7\x72\xAA\x6F\x7A\x15\xFC\xC0\x78\x6F\x17\x38\x1D" \
           b"\xCC\x9A\xCC\x84\xB2\x3D\xD7\x6D\x68\x89\xD6\x99\xE7\x25\x52\xE9" \
           b"\x14\xF3\xC9\xCB\xF4\x11\x4A\x8D\xA4\x58\xDC\xDD\xC6\xFF\xC9\x7A" \
           b"\xA7\xBF\x6E\xDB\xC0\x69\xDE\x83\x68\xB7\x87\xC3\x97\xBB\xDF\x0B" \
           b"\x79\xFD\xCC\x58\x61\x33\x92\x31\x34\x80\x0F\x08\x66\x7F\xD8\xB3" \
           b"\x21\x1F\x57\xE4\x44\xCF\xCB\xCF\xE7\xA4\x04\x8D\x52\x32\x3C\x17" \
           b"\x1F\xCF\x8F\xA1\xA3\x36\x81\xDE\xD4\x9E\x62\x70\x1F\xF6\x1C\x17" \
           b"\xD4\xEB\x22\x3B\x2E\x97\x1A\xE0\x22\x4C\x46\xA7\x8F\xE8\x7E\xD3" \
           b"\x8B\x8A\x24\xA6\x82\x01\x3C\x30\x82\x01\x38\xA0\x03\x02\x01\x12" \
           b"\xA1\x03\x02\x01\x0B\xA2\x82\x01\x2A\x04\x82\x01\x26\xAE\xFC\x3B" \
           b"\xCB\x1F\x6A\x18\x35\x54\x3D\x82\xDD\xA2\x2D\xD6\x9F\xF6\x6A\x15" \
           b"\x78\x6C\xD4\x13\x53\x0A\x7B\x96\x75\x17\x8C\x04\x18\x91\x30\xEB" \
           b"\x0B\xD4\x9F\x6B\x25\xAA\xC4\x10\xE8\x94\x5A\xA2\x9A\x60\x77\x36" \
           b"\xA8\x51\x65\x38\x97\xB3\xCE\xEC\x08\xED\xC4\x87\xBC\x5C\xD5\x85" \
           b"\x8C\x3F\x98\x55\x3A\x26\xAF\xB9\x55\x8E\x63\x12\x40\x9B\x3C\x9D" \
           b"\x91\xCB\x23\xCA\x7D\xA5\xA6\x39\x60\x29\xF3\x2B\xB3\x08\xAE\x40" \
           b"\x41\xE2\x9B\x35\xDB\x14\x45\xA5\x4B\xCA\x53\xBC\x23\xA7\x48\xAE" \
           b"\xC1\xFE\xD1\x9B\x5F\xEA\x60\x51\x9F\x32\x39\x28\x3A\x8F\xC0\x70" \
           b"\xD9\xF2\xD9\x5F\xD0\x2A\x68\xD4\x01\x04\x81\xC9\x34\xB2\x7F\x98" \
           b"\x07\x2F\x75\xF8\x76\xBE\xE2\xC2\x06\x8F\x65\x54\xAE\xD5\x33\xC7" \
           b"\x66\x22\x04\x3B\xF7\x02\x29\x34\x38\x6F\x2B\xAE\x6E\x15\x79\x8C" \
           b"\x11\xD9\x2B\xFE\xF3\xC3\x04\xC2\xB8\xC7\xF7\xBF\x4C\x93\x50\x98" \
           b"\xCE\xF6\xCA\x32\x58\xF5\x7F\x73\x2C\x2A\xB5\xCA\x3F\xD5\x53\xB6" \
           b"\x96\x2C\x7B\xC2\x17\xCB\x5B\x57\x29\xA5\x33\xD3\xF6\x46\x17\xA6" \
           b"\x05\xA2\x25\x6C\x42\xEE\xC3\xAC\xE8\xE2\x32\x79\x77\x99\xD8\x2D" \
           b"\xF5\x48\xA0\x29\xEA\xFD\x96\x0E\xC5\x96\xBA\x2C\x76\x61\xEC\x24" \
           b"\x69\xCB\xD9\x0E\x63\xC4\x52\x32\x4D\xFA\x6E\xDF\x3D\x60\x16\x62" \
           b"\xAD\xB5\xA3\xCF\x0C\x13\x8C\xA8\x6E\xF1\xDC\xB6\x54\x36\xE4\x01" \
           b"\x11\xFB\x00"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, kerb.KrbAsRep)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.as_rep
    assert actual.cname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.principal, [b'vagrant-domain'])
    assert actual.crealm == b'DOMAIN.LOCAL'

    assert isinstance(actual.enc_part.cipher, bytes)
    assert actual.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.enc_part.kvno == 11

    assert isinstance(actual.padata, list)
    assert len(actual.padata) == 1
    assert actual.padata[0].data_type == kerb.KerberosPADataType.etype_info2
    assert actual.padata[0].b_value == b"\x30\x25\x30\x23\xA0\x03\x02\x01\x12\xA1\x1C\x1B\x1A\x44\x4F\x4D" \
                                       b"\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\x76\x61\x67\x72\x61\x6E\x74" \
                                       b"\x2D\x64\x6F\x6D\x61\x69\x6E"
    pa1_val = actual.padata[0].value
    assert isinstance(pa1_val, list)
    assert len(pa1_val) == 1
    assert pa1_val[0].etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert pa1_val[0].salt == b"DOMAIN.LOCALvagrant-domain"
    assert pa1_val[0].s2kparams is None

    assert isinstance(actual.ticket.enc_part.cipher, bytes)
    assert actual.ticket.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.ticket.enc_part.kvno == 2
    assert actual.ticket.realm == b'DOMAIN.LOCAL'
    assert actual.ticket.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_inst,
                                                     [b'krbtgt', b'DOMAIN.LOCAL'])
    assert actual.ticket.tkt_vno == 5

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'AS-REP (11)'
    assert isinstance(actual['padata'], list)
    assert len(actual['padata']) == 1
    assert actual['padata'][0]['padata-type'] == 'PA-ETYPE-INFO2 (19)'
    assert isinstance(actual['padata'][0]['padata-value'], list)
    assert len(actual['padata'][0]['padata-value']) == 1
    assert actual['padata'][0]['padata-value'][0]['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['padata'][0]['padata-value'][0]['salt'] == '444F4D41494E2E4C4F43414C76616772616E742D646F6D61696E'
    assert actual['padata'][0]['padata-value'][0]['s2kparams'] is None
    assert actual['crealm'] == 'DOMAIN.LOCAL'
    assert actual['cname']['name-type'] == 'NT-PRINCIPAL (1)'
    assert actual['cname']['name-string'] == ['vagrant-domain']
    assert actual['ticket']['tkt-vno'] == 5
    assert actual['ticket']['realm'] == 'DOMAIN.LOCAL'
    assert actual['ticket']['sname']['name-type'] == 'NT-SRV-INST (2)'
    assert actual['ticket']['sname']['name-string'] == ['krbtgt', 'DOMAIN.LOCAL']
    assert actual['ticket']['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['ticket']['enc-part']['kvno'] == 2
    assert isinstance(actual['ticket']['enc-part']['cipher'], text_type)
    assert actual['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['enc-part']['kvno'] == 11
    assert isinstance(actual['enc-part']['cipher'], text_type)


def test_unpack_krb_tgs_rep():
    data = b"\x30\x82\x05\xB6\xA0\x03\x02\x01\x05\xA1\x03\x02\x01\x0D\xA3\x0E" \
           b"\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xA4\x1B" \
           b"\x30\x19\xA0\x03\x02\x01\x01\xA1\x12\x30\x10\x1B\x0E\x76\x61\x67" \
           b"\x72\x61\x6E\x74\x2D\x64\x6F\x6D\x61\x69\x6E\xA5\x82\x04\x5F\x61" \
           b"\x82\x04\x5B\x30\x82\x04\x57\xA0\x03\x02\x01\x05\xA1\x0E\x1B\x0C" \
           b"\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xA2\x2A\x30\x28" \
           b"\xA0\x03\x02\x01\x03\xA1\x21\x30\x1F\x1B\x04\x48\x54\x54\x50\x1B" \
           b"\x17\x73\x65\x72\x76\x65\x72\x32\x30\x31\x39\x2E\x64\x6F\x6D\x61" \
           b"\x69\x6E\x2E\x6C\x6F\x63\x61\x6C\xA3\x82\x04\x12\x30\x82\x04\x0E" \
           b"\xA0\x03\x02\x01\x12\xA1\x03\x02\x01\x06\xA2\x82\x04\x00\x04\x82" \
           b"\x03\xFC\x3A\x23\x1F\x7E\x75\xB0\x4A\xE4\x76\xB9\xF0\x1D\x3E\x42" \
           b"\x67\x65\xB9\x54\xB1\xFE\xD7\x80\x55\x66\x7A\xA3\xC5\xB0\x32\x4A" \
           b"\x4E\x42\xC7\x43\x82\x41\x7F\xDE\xA6\x05\x32\x20\x68\x46\x3F\x54" \
           b"\x86\x3C\x52\x4D\xF0\xEC\xFC\x2E\x7A\x5A\x07\x56\x88\xE7\x41\x7E" \
           b"\xB9\x61\xFC\x85\x47\x6D\x27\x7D\xAF\x7B\x04\x66\x53\xFE\xC2\x60" \
           b"\x5B\x2A\xCD\x12\xA4\x74\xEF\xDF\x2D\x09\xC5\x7E\x13\xE4\x18\xCE" \
           b"\x8E\x9A\x52\x28\x4B\x6C\xE1\x70\x33\xF5\xFF\xBC\xA1\x5A\x04\x7C" \
           b"\xDF\xD5\x78\xF0\x43\x78\x5F\x5E\xD6\x28\xED\xDF\xBC\x44\x6B\xAA" \
           b"\x0D\x80\x47\xB2\xEA\x09\xEE\x27\x8C\xB9\x95\x44\x8B\xE6\xF5\xF4" \
           b"\xF9\x80\x9E\x68\xBF\x36\x18\xF2\x49\x02\x0A\xF5\x7C\x2B\x5B\x9F" \
           b"\x47\xB6\xC4\xE0\xA7\xAE\x3F\x53\xE2\xE5\xF4\xD1\x32\x2F\xF1\xB8" \
           b"\xB7\x19\xF8\x99\x02\xE9\xB4\x51\xC6\x49\xA6\x93\xCA\x28\xC5\xA3" \
           b"\xFA\x01\x94\x9B\x70\x30\x9C\xDA\x4B\xA4\xAD\x1F\x35\x60\x51\x57" \
           b"\xC0\x68\x26\xA8\xBF\x25\x4D\x7E\xAD\x04\x71\x29\x2F\xAD\x71\x99" \
           b"\x63\xC4\x60\x73\x4D\x41\xBD\x60\xFB\xB4\x79\xD9\xBA\x8A\x5E\xFF" \
           b"\x6E\x06\x1F\x13\x70\xA7\x8B\xB0\x4C\x9A\x2D\xFE\xA8\xF6\x54\xF6" \
           b"\x0F\xC4\xD1\x00\xCC\xFF\x2E\x8B\xE0\x3E\x5E\x3C\x6D\x0C\x82\x13" \
           b"\x95\xBC\x7B\xAD\xDC\x16\x2A\x41\x16\xAD\x4F\xA7\x83\x86\x27\x66" \
           b"\x5A\x7D\x89\xC1\xFB\xA7\x42\x8E\x74\x84\x9E\x62\x8C\x4F\x71\x3A" \
           b"\xAF\x24\x18\x4B\xCE\x11\xD1\x50\x1B\xBC\x95\x21\xE0\x8C\xE1\xEC" \
           b"\xCD\x23\xBC\x3A\x4C\x25\xF3\xD2\xC2\xD4\xE8\x7B\xBF\x1C\xBD\xCE" \
           b"\x14\xFC\x0C\x33\x76\x4B\x21\x43\xA9\x58\xFC\xEE\xB4\x9D\x80\xD5" \
           b"\x1B\x5A\xDD\xE5\xC1\x02\x01\xD1\x9A\x79\x56\x54\x49\x7E\x74\x41" \
           b"\xF2\x45\x97\x3D\x9D\x7E\xBA\x12\x32\x5C\xBC\x42\x28\xFC\x46\x23" \
           b"\xF1\x64\xCC\xAF\x2C\x93\x79\x8B\x29\x2F\x58\x64\xBE\x0F\xAE\x33" \
           b"\x2E\x64\xCA\x54\x8C\xAC\xEA\x15\xF6\x99\xC7\xA6\xB2\x12\x4E\x8B" \
           b"\xF0\x52\x80\xDF\xB8\x4E\x8D\xA4\x3B\x03\x9F\xA9\x34\xB3\x3F\x94" \
           b"\x27\xCA\x90\xDC\xE2\x93\x4F\x2F\xAB\x70\x39\xE0\x7C\x23\x09\x40" \
           b"\xDA\x97\xF8\x88\xB1\x73\xDD\xFC\x94\xAD\xC0\xB5\x23\xB6\x4C\xB9" \
           b"\xE7\x51\xA3\xF0\xC4\x45\x03\xAB\xAF\xC8\x15\x62\xAA\x72\x9C\xBB" \
           b"\x2A\x3A\xC0\xD5\x17\xEC\x63\xAB\xD8\x46\xA9\xEF\xBA\x46\x0D\x6A" \
           b"\x0D\x68\xB3\xF8\xAD\x7C\x5E\x10\x41\x48\xFA\xF4\xEA\x0D\x74\x20" \
           b"\x27\x92\x76\xF9\x53\xA6\xF7\x60\x8A\x91\x4A\x7A\xE1\x26\x90\x1F" \
           b"\xE6\x32\x0C\x1F\x0E\x38\x52\xD3\x30\xBD\xB1\x42\x51\x4B\x5B\xD2" \
           b"\x13\xF2\x16\xA3\xB1\x7A\x34\xFB\x2B\x5A\x4B\x73\x70\x83\x64\x26" \
           b"\x33\x1B\xA7\x7A\xFF\x4D\x61\xDB\xC6\x33\xFE\xA3\x5E\x87\x70\xCF" \
           b"\x06\x6E\xC7\x0B\x8A\xCE\x98\xD3\x00\x51\x27\x58\x89\xC7\xDD\x9C" \
           b"\xF4\x63\x7A\x36\x3A\x5E\xC3\xDF\x6A\xA3\xF9\xEF\x4B\x86\x5C\x25" \
           b"\xD7\xC7\xAA\x2B\xFD\x32\xA0\xE5\xB3\x5D\xCF\x6F\xFD\x4D\xF1\x62" \
           b"\xD6\x50\x3F\x88\xC0\xFE\xA4\x76\x24\x65\x0A\x26\x1E\x6B\xE0\x25" \
           b"\x0F\x92\xC5\x27\x8C\x3D\x51\xB2\x66\x4C\x74\x3A\xB6\x77\x1D\xB1" \
           b"\x4F\x66\xB9\x6C\xF7\x1E\xDC\xA6\x77\xB9\x81\xAC\x83\xF0\x60\xB0" \
           b"\x3C\xB5\x86\xA2\x1F\xF1\xC5\xFA\xFB\x98\x01\xF2\x6A\xE8\xE3\x73" \
           b"\xCF\xB5\xD4\xE0\x97\x82\x46\xCF\x74\xA6\x16\x2F\x93\x93\x7B\xFF" \
           b"\xE4\xC0\x4B\xA2\xF5\xFD\x35\xA5\x94\xBB\x4D\xB6\x37\x96\xEF\x89" \
           b"\x0E\x93\x83\xD3\xDA\xD9\x71\xF0\xC1\x26\xAD\x7C\xC7\xA1\x70\xD7" \
           b"\x44\xDD\x2A\x2D\xD7\x93\xB6\x7A\xAB\xFB\x3C\xB4\x91\x01\x66\x58" \
           b"\x45\xBD\x31\x9A\x8C\x8C\xFE\x31\x0B\xD1\xEB\x5E\x42\xFE\x90\x28" \
           b"\xA4\x78\xDF\x33\xC2\xF2\x40\xBC\x50\x31\xD4\x72\xEB\xBF\x4D\xBD" \
           b"\x16\x66\xFD\x93\x80\xDF\xC7\x08\x7B\x67\xDC\x69\xE3\xCC\x1C\x79" \
           b"\xAA\xD5\x08\x97\x50\x33\xE1\xED\x05\x79\xAB\x2E\x26\xAF\xC8\x73" \
           b"\x1D\xC5\x66\xB5\xC6\xBF\x1D\x1F\xD6\x50\x34\x97\x3D\x99\x60\x32" \
           b"\x4A\xE1\xAA\x17\xD4\xD4\x92\xF3\x5B\xB5\x10\x72\x8C\x94\x24\x7A" \
           b"\xEE\x51\x3D\x8A\x03\x0E\x28\x36\x59\x97\xFE\xDF\xF6\xB6\x2D\x0B" \
           b"\xBD\x54\x28\x12\xEE\xAB\x8C\xD7\x2B\x25\x92\xE7\x18\x59\x1C\x4B" \
           b"\x22\x23\x56\x51\x8E\x32\x47\x43\x40\xDA\xF1\xAB\x83\xB2\x82\x13" \
           b"\xB5\xB9\x96\x25\x13\xE2\xD3\x99\x87\x73\x8B\x47\xA4\x0D\x93\x0D" \
           b"\x0E\x8E\x60\xAD\x6C\x7D\x7F\x16\xBE\x7B\x8B\xE7\x32\x56\xFB\x65" \
           b"\xD9\xE4\xE5\xA9\x76\xC9\x98\xD2\x74\x0A\xCB\xBD\x8F\x3B\x2C\x18" \
           b"\xC6\x11\xED\x0F\x65\x60\x77\x92\x25\xF2\x28\x92\xB6\x0A\x43\x8C" \
           b"\x1F\x41\x0A\xB9\x29\x0D\x37\x64\x5C\x2B\xB0\x28\x32\x97\x9E\xF5" \
           b"\xAF\x49\x22\x31\x75\x45\x77\xBF\x3C\xFA\x05\x73\x1C\x4B\x88\xF6" \
           b"\xE0\xB0\xE5\x8D\x5C\x1B\x64\xB2\x45\xA9\x53\xE4\x9A\x62\x72\x76" \
           b"\xD4\x35\xC5\xD3\x7A\x55\x8B\xFE\xAA\x04\xC2\x39\x2C\x06\xA6\x82" \
           b"\x01\x18\x30\x82\x01\x14\xA0\x03\x02\x01\x12\xA2\x82\x01\x0B\x04" \
           b"\x82\x01\x07\xB6\x36\x8A\x74\xC9\x62\x38\x90\xC0\xD3\x39\xAB\x3F" \
           b"\x7C\xBA\x5F\x4D\x75\x7E\xD2\x3A\x3D\x7C\x36\x06\x53\x43\xDC\xBC" \
           b"\x95\x56\x68\x87\x78\x94\xF8\x19\x6D\x52\x6D\x47\x37\xF6\x15\xB1" \
           b"\x64\x2D\x80\xC6\x5C\x3A\x25\xED\xD9\xE8\x20\xA1\x58\xB9\xB0\x30" \
           b"\x18\x54\x56\x31\xB1\xB0\x13\x9E\xED\x26\x05\x03\xCA\x4F\xBF\xE6" \
           b"\xFB\x39\xFD\xA0\x11\x31\x17\x35\x6C\xF1\x2A\x8C\x5A\x0E\x7B\x99" \
           b"\xA9\x71\xF5\xAA\xBE\x3F\xB2\xCF\xAD\x83\x3F\xDA\x26\x2E\x0E\xB7" \
           b"\x5E\x60\x04\x79\xDF\x0E\x3C\xC9\xB9\xCD\x4C\x62\xDB\xE2\xAC\xE3" \
           b"\xBE\x77\x4D\x01\x7B\x5D\x6D\x2B\x9D\x94\x1A\xDC\xE9\xB8\x5A\x01" \
           b"\x4E\xB1\x55\xD4\xB5\x06\x30\x0D\x3A\xEF\xC1\x6B\x2B\x54\xA9\x0B" \
           b"\x3A\xC4\xC9\x8C\xB7\x53\x85\x42\x9B\xEC\xE9\xD5\xEA\x11\x12\x58" \
           b"\xC5\xBE\x4F\xD6\x74\xFC\xB1\xF8\xDE\xA3\x2A\x8D\x30\x53\x2F\x3F" \
           b"\xC3\x39\xC2\xA5\x02\xC2\x31\x4F\x3D\x37\x91\x37\xCE\xD5\x96\xB9" \
           b"\xAF\x3C\x2A\x42\xE8\x05\xD3\xDA\x5E\xC9\x77\x5A\xEE\xA6\x26\xCE" \
           b"\x62\xE1\x30\x0C\x03\x91\x3B\x97\x01\x4C\x34\x68\x7F\x45\xC7\x71" \
           b"\xD6\x08\xA4\xC0\xA5\x2B\x2C\x71\x89\x0A\xCE\x17\xFA\xB4\x8A\x35" \
           b"\x05\xE5\x30\x77\x56\x00\x94\x7D\x32\x26"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, kerb.KrbTgsRep)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.tgs_rep
    assert actual.cname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.principal, [b'vagrant-domain'])
    assert actual.crealm == b'DOMAIN.LOCAL'

    assert isinstance(actual.enc_part.cipher, bytes)
    assert actual.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.enc_part.kvno is None

    assert actual.padata is None

    assert isinstance(actual.ticket.enc_part.cipher, bytes)
    assert actual.ticket.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.ticket.enc_part.kvno == 6
    assert actual.ticket.realm == b'DOMAIN.LOCAL'
    assert actual.ticket.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_hst,
                                                     [b'HTTP', b'server2019.domain.local'])
    assert actual.ticket.tkt_vno == 5

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'TGS-REP (13)'
    assert actual['padata'] is None
    assert actual['crealm'] == 'DOMAIN.LOCAL'
    assert actual['cname']['name-type'] == 'NT-PRINCIPAL (1)'
    assert actual['cname']['name-string'] == ['vagrant-domain']
    assert actual['ticket']['tkt-vno'] == 5
    assert actual['ticket']['realm'] == 'DOMAIN.LOCAL'
    assert actual['ticket']['sname']['name-type'] == 'NT-SRV-HST (3)'
    assert actual['ticket']['sname']['name-string'] == ['HTTP', 'server2019.domain.local']
    assert actual['ticket']['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['ticket']['enc-part']['kvno'] == 6
    assert isinstance(actual['ticket']['enc-part']['cipher'], text_type)
    assert actual['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['enc-part']['kvno'] is None
    assert isinstance(actual['enc-part']['cipher'], text_type)


def test_unpack_krb_ap_req():
    data = b"\x60\x82\x05\x5E\x06\x09\x2A\x86\x48\x86\xF7\x12\x01\x02\x02\x01" \
           b"\x00\x6E\x82\x05\x4D\x30\x82\x05\x49\xA0\x03\x02\x01\x05\xA1\x03" \
           b"\x02\x01\x0E\xA2\x07\x03\x05\x00\x20\x00\x00\x00\xA3\x82\x04\x57" \
           b"\x61\x82\x04\x53\x30\x82\x04\x4F\xA0\x03\x02\x01\x05\xA1\x0E\x1B" \
           b"\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xA2\x17\x30" \
           b"\x15\xA0\x03\x02\x01\x03\xA1\x0E\x30\x0C\x1B\x04\x68\x6F\x73\x74" \
           b"\x1B\x04\x64\x63\x30\x31\xA3\x82\x04\x1D\x30\x82\x04\x19\xA0\x03" \
           b"\x02\x01\x12\xA1\x03\x02\x01\x06\xA2\x82\x04\x0B\x04\x82\x04\x07" \
           b"\x15\x11\xF4\x52\x5F\x1B\xD6\xBF\x7F\xFB\xD9\x47\xFD\x7B\xA0\x02" \
           b"\x8F\x41\x7F\x1B\x1B\x91\x0F\x18\x93\xA1\xCF\x53\xEB\x4B\xAE\x12" \
           b"\xC9\xF0\x30\xED\xE2\x58\xC5\x54\x7D\x07\x2E\x16\x84\xF4\x0D\x93" \
           b"\xFF\xF7\x12\x3D\x19\xF1\xAD\x25\x24\xB6\xE8\xD1\x58\x25\x81\x9E" \
           b"\x7A\x1C\x22\xF9\x6A\x84\x8B\xFF\x62\xD2\xB7\x5D\xA2\xD0\x08\x32" \
           b"\x4F\x39\xBD\x5E\x1F\x80\x50\xE4\x18\xDD\x07\x70\xC7\xD5\x8E\xF2" \
           b"\x32\x92\x8D\x51\xFD\x0C\xBA\x8D\x2A\x08\x6B\x39\x5A\x5D\x90\xDA" \
           b"\x1B\x81\x24\x1E\xBA\xED\x93\xCE\x69\x26\x34\xEC\x0A\xA0\xF8\xBA" \
           b"\x2D\xE5\x35\x0F\x5E\x63\xD3\x64\x4A\x4B\xFE\xD2\x84\x11\xA4\x3B" \
           b"\xA1\x2E\xDF\x18\x63\x44\x91\x88\x37\x17\xB6\xA6\x0B\x15\xCC\x5F" \
           b"\x42\xA8\x31\x66\x5B\x0B\x46\x79\x8D\x0B\xBF\x73\xCA\xE7\xFF\x80" \
           b"\x93\x88\x6F\xC3\x43\x1B\x45\x04\x6E\x9C\x04\x96\xD8\xE4\x9D\x08" \
           b"\xAB\xEE\xE4\xDE\x1B\xC2\x15\xA2\x05\x4D\xAE\xD8\x43\x43\x98\x52" \
           b"\xF9\x30\x15\xB5\xF6\xD0\x2F\xF3\xF9\xE6\xEC\x2D\x15\xBA\x0A\x45" \
           b"\xBA\x5B\xF9\x90\x70\x39\x44\xD1\xFB\x07\xC4\x2D\x18\x1A\x2E\x1C" \
           b"\x04\x0D\x77\x8F\xAD\x7F\x78\x2F\x33\x5A\x10\x96\xF0\x0E\x52\xFA" \
           b"\xAD\x50\x42\x11\xDD\xFE\xF2\xA0\xE5\xA0\x44\x1E\x37\xF9\x4E\xF3" \
           b"\xC9\x66\x06\x36\xE0\xD5\x6E\x4B\x86\xD7\x89\xD7\x13\x1D\x02\xB3" \
           b"\xCC\xD4\x92\x2A\x36\x8A\xC3\xDF\xF8\x9B\xF2\x5B\x60\x34\x65\x1C" \
           b"\x86\xB8\x52\xDB\xA4\xBF\xB7\xB6\x07\x4F\xF8\xFF\x7B\x73\x0C\x4D" \
           b"\xB8\x1D\xE3\x3E\x7D\xE4\xE2\xB2\x31\x97\xC2\x2D\xA4\xAF\xE9\xED" \
           b"\x5C\x56\xA6\x7A\x3E\x34\xB9\x66\x56\x55\x4F\x5C\xA9\x1C\xD8\x36" \
           b"\xBA\xB4\x00\x0F\x9F\xF8\xB3\xD9\xCD\x67\xB6\x12\x1D\xF1\x09\x21" \
           b"\xE2\x4F\x87\x42\x16\x85\x38\xF9\x3C\xEA\xB9\xE9\xAE\x20\x5A\xDF" \
           b"\x3C\x42\x11\x15\xA8\xAD\xEC\x63\xD2\x65\x91\x8C\x4F\xA0\x72\x5C" \
           b"\x40\x70\x08\xB2\x7F\xC4\xBE\xFA\xCD\x5C\xA8\xA0\xD3\x34\x0E\xCD" \
           b"\xD6\x64\xE2\x1A\x2F\x26\xB7\x94\x2A\x8B\x22\x4A\x43\x0E\x04\xE3" \
           b"\x5F\xDC\xF7\x10\xB9\x92\x4C\x6C\xB9\xB0\x8C\x27\x54\xF9\x9A\x3D" \
           b"\xAD\xED\xE7\x5A\x64\x08\x1F\xB1\x39\x75\xA6\x23\x10\x76\xF1\x2A" \
           b"\x5A\x53\x77\x74\xEB\xA2\x54\x0A\x5C\x48\x18\xB8\x09\xF3\xB5\xB3" \
           b"\x42\x88\x76\xB6\x4F\x51\xE3\x22\x92\x4A\x1C\xED\x25\xB9\xE2\xA3" \
           b"\xEC\xA6\x2B\x21\x67\x5C\x0E\xD2\xF8\x68\x2D\x66\xC4\xCE\xA8\x0D" \
           b"\x3C\x07\x53\x57\x77\x4F\xBA\xC0\xF7\x88\x98\x36\x05\xF6\x41\x0B" \
           b"\x4A\xA7\x4B\xFA\xE9\x5B\xF8\x57\x13\xCC\xA8\x7F\x18\x51\x37\x2C" \
           b"\x9F\xA4\xD8\xA7\x52\x83\x84\x4F\x46\x5A\x78\x0F\xA3\x50\xE1\x57" \
           b"\x24\x18\xAE\x2B\x57\x18\x89\x5A\x66\x27\xD0\xCB\xAF\x2B\x6C\x42" \
           b"\xBC\x0B\xB6\x1E\x03\xA9\x43\x9E\xB7\x09\x0A\x83\xB3\x68\x2B\x30" \
           b"\x5B\x82\x1E\xA9\x40\xDC\xE9\x47\x86\xC0\x6B\x59\x63\x49\x2D\xD9" \
           b"\x40\xD8\x17\x3F\x9B\xAE\xF3\xB9\x6D\x72\x02\x28\x21\x72\xD0\x35" \
           b"\xB2\x08\x83\x97\x5A\xC0\x44\xC8\x18\x06\x0D\x0A\x8F\xD8\x46\xCC" \
           b"\x67\x86\xD7\x9E\xD0\x8C\x2C\x30\x40\x61\xA8\x9E\x32\xC4\x70\x1C" \
           b"\x78\x4D\x2F\x31\xE6\x64\xEE\xE5\xEA\xF1\x62\x5D\x75\x14\x87\x2B" \
           b"\xAF\x99\xE2\xF8\x07\x0A\x6B\xB3\x3E\xBF\xB9\x39\x12\xC1\x59\xCE" \
           b"\x5C\x7B\x21\xD5\xE7\x7D\xBD\x89\x15\xD7\x9D\xEC\x31\x26\xB6\x1F" \
           b"\xF5\x10\x55\x23\x71\x7F\x1F\x63\x62\x56\x91\x57\x55\xB1\x15\x09" \
           b"\xE8\x5D\x3C\x2A\xD6\x1E\x96\xBE\xD5\xD2\x05\x0E\xE5\xF7\x20\xFD" \
           b"\x1F\x59\x69\x9F\x45\xA6\xD7\xFA\x1A\x45\x23\x01\x37\x78\x02\x2E" \
           b"\xCF\x74\x8F\x2A\x00\x11\x63\xEF\x0B\x1A\x14\x88\xB3\xA4\x8D\x8B" \
           b"\x76\x45\xA5\xDD\x6A\x9F\xCC\x50\x03\xCE\x38\x64\x0F\x74\xE8\x80" \
           b"\xFC\x4B\x21\x06\x88\x4E\x6A\x67\x14\xE8\x4F\x27\x87\xEE\x18\xCD" \
           b"\xC6\x8A\x38\x74\xDE\xC5\x95\xB8\xA3\xE7\x33\x5D\x09\x94\x1B\x91" \
           b"\x76\xEB\xAD\xB8\xEC\x6B\x8C\x5C\x65\x8D\xC8\x93\x8F\x1A\x33\x27" \
           b"\xB1\x0D\x5A\x1E\x70\xDC\xF6\x8E\xB0\x83\x22\x06\x9E\xF4\xDE\x08" \
           b"\x02\x2D\x65\x50\xA5\x25\xB4\xF7\x9F\xFF\xBD\x05\x4C\x76\x74\x5C" \
           b"\x3E\xCC\x04\x28\xC9\x5D\x74\x4C\x86\x0C\x04\x0A\x93\x2C\x37\x04" \
           b"\x01\xD4\x16\x08\x24\x7F\xFF\xC0\x8D\x03\xA3\xDD\x70\x90\x5B\xAE" \
           b"\xDD\x99\x89\xAB\xA6\xE6\x0F\x47\x47\x0E\x81\xD8\x13\x2D\x6A\xE7" \
           b"\x3D\xDB\x35\x00\x00\x36\xF6\x97\xB9\x54\x6E\xC3\xE4\xB7\xAE\xCF" \
           b"\xC4\xC7\x67\x57\x45\x44\x6D\x9E\x19\xE5\x85\x29\xD7\x0D\x37\x9E" \
           b"\x5B\xCA\xF7\xB8\xF8\x26\x0A\x8D\xD7\xAA\xF7\x7C\x17\x55\xED\x29" \
           b"\xEC\xE1\x8E\x26\xBB\x22\xA5\xD7\xF1\xE1\xE2\xB0\xF2\x26\x4F\xC1" \
           b"\x35\x75\x2E\x7B\x52\x23\x7A\x30\xA5\x4F\x6D\x7B\x1A\xBC\x6C\x1E" \
           b"\x4D\x00\x88\x1D\xBC\xA8\xB5\xD8\x45\x57\x9E\xDD\x09\x7E\x0D\x0E" \
           b"\xFC\x07\x26\xBA\x23\xE4\xCD\xFC\xFD\x3A\x56\x3C\xED\x31\xC4\xC3" \
           b"\x60\xEA\x48\xDC\xDF\x8E\x77\xA4\x81\xD8\x30\x81\xD5\xA0\x03\x02" \
           b"\x01\x12\xA2\x81\xCD\x04\x81\xCA\x9E\xBC\xD8\x27\x18\x29\xDE\x27" \
           b"\x7A\xDF\xF1\x87\xFC\x65\xAD\x4D\x05\xE6\x11\xF0\xAA\x15\x1F\x70" \
           b"\x24\x40\xF6\x78\x23\xFC\x48\xC6\xFB\xD5\x6C\x93\xDF\x64\x51\x26" \
           b"\x90\x22\x15\x43\x62\x82\xA9\x16\x79\xC0\xA5\xCE\x53\x6B\xEF\x7E" \
           b"\x4E\x13\xEA\x22\xC6\x51\x8E\x17\x48\xDD\xF1\x83\xB1\x14\x90\xFB" \
           b"\xEC\x84\x1A\x4F\xBA\x75\x42\x2E\xEA\xFE\xAA\x56\x75\x4F\x8D\x2C" \
           b"\xB2\xBB\xD5\xD2\x3C\xCD\xD9\x86\xC2\x52\x70\x20\xBD\xD0\x42\xC2" \
           b"\xAF\xA4\xF3\xD9\x23\x14\x43\x1F\xA7\x0D\x11\x8E\xFD\xBE\x8C\x13" \
           b"\xBA\x7C\x3C\xDB\x68\x9D\x22\xFE\x21\x36\x6D\x0F\xB5\xF1\x04\xC9" \
           b"\x9C\xD8\xD6\xB6\x90\x0B\x4B\x05\xE8\x62\x9F\xF2\x8C\x05\xB5\x39" \
           b"\x6C\xA2\x28\x12\x1B\x3A\x8F\x66\xBC\x12\x78\xF6\xA9\x2E\x22\x95" \
           b"\xC7\x63\xB5\x2C\x86\xEC\x30\x27\x75\xEA\x7B\xAB\x46\x57\xBF\x02" \
           b"\x1E\x51\xC6\x1E\xBF\xCC\xC2\xAF\x92\xCF\x58\x1D\xF0\x7C\xFB\x2C" \
           b"\x29\x2B"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, sp.InitialContextToken)
    assert actual.this_mech == GSSMech.kerberos.value

    actual = actual.token

    assert isinstance(actual, kerb.KrbApReq)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.ap_req
    assert actual.ap_options == kerb.KerberosAPOptions.mutual_required
    assert isinstance(actual.authenticator.cipher, bytes)
    assert actual.authenticator.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.authenticator.kvno is None
    assert isinstance(actual.ticket.enc_part.cipher, bytes)
    assert actual.ticket.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.ticket.enc_part.kvno == 6
    assert actual.ticket.realm == b'DOMAIN.LOCAL'
    assert actual.ticket.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_hst, [b'host', b'dc01'])
    assert actual.ticket.tkt_vno == 5

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'AP-REQ (14)'
    assert actual['ap-options']['raw'] == 32
    assert actual['ap-options']['flags'] == ['mutual-required (32)']
    assert actual['ticket']['tkt-vno'] == 5
    assert actual['ticket']['realm'] == 'DOMAIN.LOCAL'
    assert actual['ticket']['sname']['name-type'] == 'NT-SRV-HST (3)'
    assert actual['ticket']['sname']['name-string'] == ['host', 'dc01']
    assert actual['ticket']['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['ticket']['enc-part']['kvno'] == 6
    assert isinstance(actual['ticket']['enc-part']['cipher'], text_type)
    assert actual['authenticator']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['authenticator']['kvno'] is None
    assert isinstance(actual['authenticator']['cipher'], text_type)


def test_unpack_krb_ap_rep():
    data = b"\x60\x81\x99\x06\x09\x2A\x86\x48\x86\xF7\x12\x01\x02\x02\x02\x00" \
           b"\x6F\x81\x89\x30\x81\x86\xA0\x03\x02\x01\x05\xA1\x03\x02\x01\x0F" \
           b"\xA2\x7A\x30\x78\xA0\x03\x02\x01\x12\xA2\x71\x04\x6F\xA9\x10\x1C" \
           b"\x6F\xFD\x75\xB4\x5A\xE5\x68\xFB\xB3\xD0\x6C\xBA\x7E\xE8\xF0\xB6" \
           b"\xA5\x76\x86\x78\x35\xF1\x30\xAA\xB7\xC0\x9F\x05\x99\x99\x46\x40" \
           b"\xFE\x82\x42\x6D\x24\x89\xB5\xE1\xDB\xB0\xB5\xAE\x8E\x26\xCC\xC6" \
           b"\xE6\x53\xA3\xDD\xCE\x1E\x1D\x7D\x4B\x3E\x03\x13\x09\xF6\xF1\xBB" \
           b"\x14\xC3\xD4\xED\x3A\xD4\x99\xF0\x97\x40\x8E\xFA\xF2\xD9\xA9\x45" \
           b"\xB7\x42\xF7\xFA\xBC\x64\xC7\x24\xF5\x59\x44\xC8\x6E\x96\xAD\x59" \
           b"\x50\xC6\xFB\x2C\x1C\x55\x17\x13\x62\xB3\xAA\xA2"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, sp.InitialContextToken)
    assert actual.this_mech == GSSMech.kerberos.value

    actual = actual.token

    assert isinstance(actual, kerb.KrbApRep)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.ap_rep
    assert isinstance(actual.enc_part.cipher, bytes)
    assert actual.enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert actual.enc_part.kvno is None

    # Test pyspnego-parse dict.
    actual = kerb.parse_kerberos_token(actual)
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'AP-REP (15)'
    assert actual['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['enc-part']['kvno'] is None
    assert isinstance(actual['enc-part']['cipher'], text_type)


def test_unpack_krb_error():
    data = b"\x30\x81\xBC\xA0\x03\x02\x01\x05\xA1\x03\x02\x01\x1E\xA4\x11\x18" \
           b"\x0F\x32\x30\x32\x30\x30\x36\x31\x33\x32\x31\x30\x34\x32\x33\x5A" \
           b"\xA5\x05\x02\x03\x0B\x6C\x2F\xA6\x03\x02\x01\x19\xA9\x0E\x1B\x0C" \
           b"\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xAA\x21\x30\x1F" \
           b"\xA0\x03\x02\x01\x02\xA1\x18\x30\x16\x1B\x06\x6B\x72\x62\x74\x67" \
           b"\x74\x1B\x0C\x44\x4F\x4D\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\xAC" \
           b"\x5E\x04\x5C\x30\x5A\x30\x37\xA1\x03\x02\x01\x13\xA2\x30\x04\x2E" \
           b"\x30\x2C\x30\x23\xA0\x03\x02\x01\x12\xA1\x1C\x1B\x1A\x44\x4F\x4D" \
           b"\x41\x49\x4E\x2E\x4C\x4F\x43\x41\x4C\x76\x61\x67\x72\x61\x6E\x74" \
           b"\x2D\x64\x6F\x6D\x61\x69\x6E\x30\x05\xA0\x03\x02\x01\x17\x30\x09" \
           b"\xA1\x03\x02\x01\x02\xA2\x02\x04\x00\x30\x09\xA1\x03\x02\x01\x10" \
           b"\xA2\x02\x04\x00\x30\x09\xA1\x03\x02\x01\x0F\xA2\x02\x04\x00"

    actual = sp.unpack_token(data)
    assert actual == data

    actual = sp.unpack_token(data, unwrap=True)

    assert isinstance(actual, kerb.KrbError)
    assert actual.PVNO == 5
    assert actual.MESSAGE_TYPE == kerb.KerberosMessageType.error
    assert actual.cname is None
    assert actual.crealm is None
    assert actual.ctime is None
    assert actual.cusec is None
    assert isinstance(actual.e_data, bytes)
    assert actual.e_text is None
    assert actual.error_code == kerb.KerberosErrorCode.preauth_required
    assert actual.realm == b'DOMAIN.LOCAL'
    assert actual.sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.srv_inst, [b'krbtgt', b'DOMAIN.LOCAL'])
    assert actual.stime == datetime.datetime(2020, 6, 13, 21, 4, 23, tzinfo=UTC())
    assert actual.susec == 748591

    actual = kerb.parse_kerberos_token(actual, encoding='utf-8')
    assert actual['pvno'] == 5
    assert actual['msg-type'] == 'KRB-ERROR (30)'
    assert actual['ctime'] is None
    assert actual['cusec'] is None
    assert actual['stime'] == '2020-06-13T21:04:23+00:00'
    assert actual['susec'] == 748591
    assert actual['error-code'] == 'KDC_ERR_PREAUTH_REQUIRED (25)'
    assert actual['crealm'] is None
    assert actual['cname'] is None
    assert actual['realm'] == 'DOMAIN.LOCAL'
    assert actual['sname']['name-type'] == 'NT-SRV-INST (2)'
    assert actual['sname']['name-string'] == ['krbtgt', 'DOMAIN.LOCAL']
    assert actual['e-text'] is None
    assert isinstance(actual['e-data'], text_type)


def test_padata_unknown_type():
    value = b"".join([
        pack_asn1(TagClass.context_specific, True, 1, pack_asn1_integer(1024)),
        pack_asn1(TagClass.context_specific, True, 2, pack_asn1_octet_string(b"")),
    ])
    padata = kerb.PAData.unpack(value)

    assert padata.data_type == 1024
    assert padata.b_value == b""
    assert padata.value == b""

    actual = kerb.parse_kerberos_token(padata)

    assert actual['padata-type'] == 'UNKNOWN (1024)'
    assert actual['padata-value'] == ''


def test_req_body_addresses():
    value = b"".join([
        pack_asn1(TagClass.context_specific, True, 0, pack_asn1_bit_string(b"\x00\x00\x00\x00")),
        pack_asn1(TagClass.context_specific, True, 2, pack_asn1_general_string(b"DOMAIN.LOCAL")),
        pack_asn1(TagClass.context_specific, True, 7, pack_asn1_integer(1)),
        pack_asn1(TagClass.context_specific, True, 8,
                  pack_asn1_sequence([pack_asn1_integer(kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96)])),
        pack_asn1(TagClass.context_specific, True, 9, pack_asn1_sequence([pack_asn1_sequence([
            pack_asn1(TagClass.context_specific, True, 0, pack_asn1_integer(kerb.KerberosHostAddressType.ipv4)),
            pack_asn1(TagClass.context_specific, True, 1, pack_asn1_octet_string(b"dc01.domain.local")),
        ])])),
    ])
    req_body = kerb.KdcReqBody.unpack(value)

    assert isinstance(req_body.addresses, list)
    assert len(req_body.addresses) == 1
    assert req_body.addresses[0].addr_type == kerb.KerberosHostAddressType.ipv4
    assert req_body.addresses[0].value == b'dc01.domain.local'

    actual = kerb.parse_kerberos_token(req_body)
    assert actual['addresses'][0]['addr-type'] == 'IPv4 (2)'
    assert actual['addresses'][0]['address'] == 'dc01.domain.local'


def test_req_body_ticket():
    ticket = pack_asn1(TagClass.application, True, 1, pack_asn1_sequence([
        pack_asn1(TagClass.context_specific, True, 0, pack_asn1_integer(5)),
        pack_asn1(TagClass.context_specific, True, 1, pack_asn1_general_string(b'DOMAIN.LOCAL')),
        pack_asn1(TagClass.context_specific, True, 2, pack_asn1_sequence([
            pack_asn1(TagClass.context_specific, True, 0, pack_asn1_integer(kerb.KerberosPrincipalNameType.principal)),
            pack_asn1(TagClass.context_specific, True, 1, pack_asn1_sequence([
                pack_asn1_general_string(b"vagrant-domain"),
            ])),
        ])),
        pack_asn1(TagClass.context_specific, True, 3, pack_asn1_sequence([
            pack_asn1(TagClass.context_specific, True, 0,
                      pack_asn1_integer(kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96)),
            pack_asn1(TagClass.context_specific, True, 2, pack_asn1_octet_string(b"\x00\x01")),
        ])),
    ]))
    value = b"".join([
        pack_asn1(TagClass.context_specific, True, 0, pack_asn1_bit_string(b"\x00\x00\x00\x00")),
        pack_asn1(TagClass.context_specific, True, 2, pack_asn1_general_string(b"DOMAIN.LOCAL")),
        pack_asn1(TagClass.context_specific, True, 7, pack_asn1_integer(1)),
        pack_asn1(TagClass.context_specific, True, 8, pack_asn1_sequence([
            pack_asn1_integer(kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96)
        ])),
        pack_asn1(TagClass.context_specific, True, 11, pack_asn1_sequence([ticket])),
    ])
    req_body = kerb.KdcReqBody.unpack(value)

    assert isinstance(req_body.additional_tickets, list)
    assert len(req_body.additional_tickets) == 1
    assert req_body.additional_tickets[0].enc_part.cipher == b"\x00\x01"
    assert req_body.additional_tickets[0].enc_part.etype == kerb.KerberosEncryptionType.aes256_cts_hmac_sha1_96
    assert req_body.additional_tickets[0].enc_part.kvno is None
    assert req_body.additional_tickets[0].realm == b"DOMAIN.LOCAL"
    assert req_body.additional_tickets[0].sname == kerb.PrincipalName(kerb.KerberosPrincipalNameType.principal,
                                                                      [b'vagrant-domain'])
    assert req_body.additional_tickets[0].tkt_vno == 5

    actual = kerb.parse_kerberos_token(req_body)
    assert actual['additional-tickets'][0]['tkt-vno'] == 5
    assert actual['additional-tickets'][0]['realm'] == 'DOMAIN.LOCAL'
    assert actual['additional-tickets'][0]['sname']['name-type'] == 'NT-PRINCIPAL (1)'
    assert actual['additional-tickets'][0]['sname']['name-string'] == ['vagrant-domain']
    assert actual['additional-tickets'][0]['enc-part']['etype'] == 'AES256_CTS_HMAC_SHA1_96 (18)'
    assert actual['additional-tickets'][0]['enc-part']['kvno'] is None
    assert actual['additional-tickets'][0]['enc-part']['cipher'] == '0001'
